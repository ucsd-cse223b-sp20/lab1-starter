[Grading Report]

[test 0] 2/2 (pass): your code compiles
[test 1] 0/4 (failed): your code passes the basic test
[test 2] 0/1 (failed): your rpc client does not return a nil list as an empty list
[test 3] 0/1 (failed): your rpc client clears the list when it wants to return an empty list
[test 4] 0/1 (failed): ServeBack() blocks on serving
[test 5] 0/1 (failed): ServeBack() sends a false to Ready channel on listen error
[test 6] 0/1 (failed): ServeBack() returns error when the address is not resolvable
[test 7] 0/1 (failed): ServeBack() uses the storage provided
[test 8] 0/1 (failed): ServeBack() can spawn two back-ends in one single process
[test 9] 0/1 (failed): your rpc client can connect to another rpc server implementation
[test 10] 0/1 (failed): your rpc server can accept from another rpc client implementation
[test 11] 0/1 (failed): your rpc client works when the server restarts after the client creates
[test 12] 0/1 (failed): your rpc client works when the server restarts between two rpc calls
[test 13] 0/1 (failed): ServeBack() returns error when the listening socket is shutdown
[test 14] 0/1 (failed): your implementation handles concurrent list appends
[test 15] 0/1 (failed): your rpc client returns error when the connection is lost

Total 2/20

